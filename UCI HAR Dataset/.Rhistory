makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
test <- vector(1:10)
test <- vector()
test <- 1:10
testing <- makeVector(test)
testingmean <- cachemean(test)
testingmean <- cachemean(testing)
cachemean(testing)
?solve]
?solve
source('~/coursera/PA2/ProgrammingAssignment2/cachematrix.R')
testm <- matrix(c(1,2,3,4,5,6,7,8,9),nrow=3,ncol=2)
testm
testm <- matrix(c(1,2,3,4,5,6,7,8,9),nrow=3,ncol=3)
testm
makeCacheMatrix(testm)
testma <- makeCacheMatrix(testm)
intestma <- cacheSolve(testma)
source('~/coursera/PA2/ProgrammingAssignment2/cachematrix.R')
intestma <- cacheSolve(testma)
testm
class(testm)
class(testm[1,2])
solve(testm)
sdtr <- solve(testm)
det(x)
det(test)
det(testm)
?rnorm
source('~/coursera/PA2/ProgrammingAssignment2/cachematrix.R')
testm <- matrix(rnorm(9),ncol=3,nrow=3)
det(testm)
testma<-makeCacheMatrix(testm)
cacheSolve(testma)
source('~/coursera/PA2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(testma)
source('~/coursera/PA2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(testma)
source('~/coursera/PA2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(testma)
cacheSolve(testma)
testm <- matrix(rnorm(9),ncol=3,nrow=3)
cacheSolve(testma)
testma<-makeCacheMatrix(testm)
cacheSolve(testma)
cacheSolve(testma)
source('~/coursera/PA2/ProgrammingAssignment2/cachematrix.R')
installed.packages("dyplr")
library(dyplr)
install.packages("dyplr")
swirl()
library(swirl)
swirl()
mydf = read.csv(path2csv,stringsAsFactors = FALSE)
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head()
head(mydf)
library(dyplr)
library(dplyr)
packageVersion(dplyr)
packageVersion("dplyr")
packageVersion("dplyr")
install.packages("dplyr")
library(dplyr)
packageVersion("dplyr")
swirl()
library(swirl)
library(swirl)
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv,stringsAsFactors = False)
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim()
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran,r_version=="3.1.1",country=="US")
?Comparision
?Comparison
filter(cran,r_version=="3.0.2",country=="IN")
filter(cran,r_version<="3.0.2",country=="IN")
filter(cran,country=="US"|country=="IN")
filter(cran,size > 100500 & r_os=="linux-gnu")
filter(cran,size > 100500,r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,size > 100500,r_os=="linux-gnu",!is.na(r_version))
filter(cran,!is.na(r_version))
cran2 <- select(cran,ip_id,store)
cran2 <- select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,descip_id)
arrange(cran2,desc(ip_id)
)
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3 <- select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size=size-1000)
mutate(cran3,correct_size=size+1000)
summarize(cran,avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
group_by(cran,package)
by_package <- group_by(cran,package)
by_package
summarize(by_package,avg_bytes=mean(size))
summarize(by_package,mean(size))
submit()
submit()
pack_sum
quantile(pack_sum$count,probs = 0.99)
top_counts <- filter(cran,count>679)
top_counts <- filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted<- arrange(top_counts,desc(count)
)
View(top_counts_sorted)
quantile(pack_sum$unique,probs=0.99)
top_unique <- filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
swirl()
library(tidyr)
students()
students
?gather
gather(students,sex,count,-grade)
students2
gather(students2,sex_class,count,-grade)
res<- gather(students2,sex_class,count,-grade)
res
?separate
separate(res,sex_class,c("sex","class"))
submit()
students3
submit()
submit()
?spread
submit()
submit()
library(readr)
parse_number("class5")
submit()
submit()
reset()
swirl()
submit()
?parse_number
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed,status="passed")
failed <- mutate(failed,status="failed")
?bind_rows
bindrows(passed,failed)
bind_rows(passed,failed)
sat
?separate
submit()
submit()
wd()
getWd()
getwd()
setwd("~/")
setwd("~/coursera")
q1 <- read.csv("hid01.csv")
view(q1)
View(q1)
strsplit(names(q1),"wgtp")
?strsplit
splitter <- strsplit(q1,"wgtp")
splitter <- strsplit(names(q1),"wgtp")
q1[1]
splitter(q1)
splitter[1]
splitter[123]
q2 <- read.csv("gdp01.csv")
view(q2)
View(q2)
head(q2)
gsub("\,","",q2$X.3)
gsub(/,","",q2$X.3)
gsub("/,","",q2$X.3)
gsub(",","",q2$X.3)
test <- q2[q2$X.3][7]
test <- q2$X.3[7]
test
q2 <- q2[-4,]
View(q2)
q2 <- read.csv("gdp01.csv")
test <- q2[-4,]
View(test)
test <- q2[-1:4,]
test <- q2[-(1:4),]
tester<- gsub(",","",test$X.3)
View(tester)
tester
dims(tester)
dim(tester)
str(tester)
mean(tester)
numeric(tester)
testernum <- numeric(tester)
testernum <- as.numeric(tester)
mean(testernum,na.rm = TRUE)
testernum
mean(testernum[1:190],na.rm = TRUE)
grep("^United",q2$X.2)
grep("*United",q2$X.2)
q4 <- read.csv("coun01.csv")
View(q4)
merge(q2,q4,by.x=c("X"),by.y = c("CountryCode"))
testmerge <- merge(q2,q4,by.x=c("X"),by.y = c("CountryCode"))
testmerge
View(testmerge)
View(q2)
grep("June ",testmerge$Special.Notes)
grepl("June ",testmerge$Special.Notes)
?grep
grep("June ",testmerge$Special.Notes, value=TRUE)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
View(sampleTimes)
head(sampleTimes)
str(sampleTimes)
library(lubridate)
year(sampleTimes)
sum(year(sampleTimes)==2012)
sum(wday(sampleTimes)=="Monday")
sum(wday(sampleTimes)=="Mon")
wday(sampleTimes)
?wday
wday(sampleTimes,label = TRUE)
sum(wday(sampleTimes,label = TRUE)=="Monday")
sum(wday(sampleTimes,label = TRUE)=="Mon")
sum(wday(sampleTimes,label = TRUE)=="Mon" $$ year(sampleTime)==2012)
sum(wday(sampleTimes,label = TRUE)=="Mon" && year(sampleTime)==2012)
sum(wday(sampleTimes,label = TRUE)=="Mon" && year(sampleTimes)==2012)
sum(year(sampleTimes)==2012)
if(year(sampleTimes)==2012)"Boo"
lapply(if(year(sampleTimes)==2012)"Boo")
lapply(FUN=(if(year(sampleTimes)==2012)"Boo"))
dater <- sampleTimes[year(sampleTimes)==2012]
dater
sum(wday(dater,label = TRUE)=="Mon")
setwd("~/coursera/UCI HAR Dataset")
